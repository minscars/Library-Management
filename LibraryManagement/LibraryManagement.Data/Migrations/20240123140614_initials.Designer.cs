// <auto-generated />
using System;
using LibraryManagement.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Data.Migrations
{
    [DbContext(typeof(LibraryManagementDbContext))]
    [Migration("20240123140614_initials")]
    partial class initials
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 906, DateTimeKind.Local).AddTicks(4944));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity_Borrowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Quantity_Export")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Quantity_Import")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("Quantity_On_Hand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 906, DateTimeKind.Local).AddTicks(5215));

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "1.png",
                            IsDeleted = false,
                            Name = "Tìm mình trong thế giới hậu tuổi thơ",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "2.png",
                            IsDeleted = false,
                            Name = "Điều kỳ diệu của tiệm tạp hóa Namiya",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "3.png",
                            IsDeleted = false,
                            Name = "Rồi một ngày cuộc sống hóa hư vô",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "4.png",
                            IsDeleted = false,
                            Name = "Quán ăn nơi góc hẻm",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "5.png",
                            IsDeleted = false,
                            Name = "Thần số học",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "6.png",
                            IsDeleted = false,
                            Name = "Từ điển tiếng Việt",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "7.png",
                            IsDeleted = false,
                            Name = "Từ điển Hán Việt",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "8.png",
                            IsDeleted = false,
                            Name = "Đất rừng phương nam",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "9.png",
                            IsDeleted = false,
                            Name = "Lược sử Trái Đất",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Description = "Khi ngợi khen một người trẻ độc lập mạnh mẽ, có thể chúng ta không sao, cô đơn khắc khoải thế nào. Khi ngưỡng một một người trẻ học giỏi, có thể chúng ta không biết họ đã bị ngạt thở bởi kỳ vọng của cha mẹ. Khi phán xét một người trẻ hời hợt thiếu động lực sống...",
                            Image = "10.png",
                            IsDeleted = false,
                            Name = "Sapien lược sử loài người",
                            Quantity_Borrowed = 0,
                            Quantity_Export = 0,
                            Quantity_Import = 0,
                            Quantity_On_Hand = 0
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BorrowBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowBills");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BorrowBillDetail", b =>
                {
                    b.Property<int>("BorrowBillId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("BorrowBillId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BorrowBillDetails");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 906, DateTimeKind.Local).AddTicks(5994));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 906, DateTimeKind.Local).AddTicks(6193));

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Tiểu thuyết"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Sách tâm lý"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Sách khoa học"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Từ điển"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Sách văn học"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 907, DateTimeKind.Local).AddTicks(2829));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Test",
                            CreatedDate = new DateTime(2024, 1, 23, 21, 6, 13, 911, DateTimeKind.Local).AddTicks(7106),
                            PostId = 1,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 907, DateTimeKind.Local).AddTicks(4252));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedBacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            Content = "Test",
                            CreatedDate = new DateTime(2024, 1, 23, 21, 6, 13, 911, DateTimeKind.Local).AddTicks(7130),
                            Rate = 5,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BorrowBillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsViewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowBillId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 907, DateTimeKind.Local).AddTicks(2067));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 23, 21, 6, 13, 907, DateTimeKind.Local).AddTicks(2340));

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Test",
                            Image = "Test",
                            Status = 0,
                            Title = "Test",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Request", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("BookId", "UserId", "CreatedDate");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsSelected = true,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("avatar-default.png");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4"),
                            AccessFailedCount = 0,
                            Avatar = "kha.jpg",
                            ConcurrencyStamp = "276f5c4a-b60a-4087-a62f-24fa6478f6d9",
                            Email = "kha@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lê Minh Kha",
                            NormalizedEmail = "KHA@GMAIL.COM",
                            NormalizedUserName = "KHA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFa5KuohgJYzlO0s6yLXlijXGdPip3w2qrKI+5gXmgkc1nBI5mYhf4LRG3W5FmphDw==",
                            PhoneNumber = "0398897634",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kha@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("372ea575-2536-4076-9bab-3e3138de495f"),
                            AccessFailedCount = 0,
                            Avatar = "admin.jpg",
                            ConcurrencyStamp = "3aea5380-859d-4926-bff4-e02f8e9649a2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOT3SOl8OfH1b0em3Xv1dtZ0Suvbu/nQktA5VFcxcZbmN2nCpF7JCxej6kxr1DmhWw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4"),
                            AccessFailedCount = 0,
                            Avatar = "lam.jpg",
                            ConcurrencyStamp = "965c38aa-bede-46be-a3bd-fe40d08f39dc",
                            Email = "lam@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nguyễn Tùng Lâm",
                            NormalizedEmail = "LAM@GMAIL.COM",
                            NormalizedUserName = "LAM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7mXZ7wDI0qnT6+wJKOlwIW2HjjSKFs5kVPJkpiwVw11nJRH23iUt4kx0fvjRaq+g==",
                            PhoneNumber = "0338307449",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "lam@gmail.com"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e87b492-5343-4272-9a34-fa5de7cffb22"),
                            ConcurrencyStamp = "9baf42f5-c043-41a7-890a-bb03ee624761",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31"),
                            ConcurrencyStamp = "2b75d5e1-0d18-43d7-b1c2-a57beb424892",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "id",
                            ClaimValue = "372ea575-2536-4076-9bab-3e3138de495f",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "email",
                            ClaimValue = "admin@gmail.com",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "roles",
                            ClaimValue = "Admin",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "id",
                            ClaimValue = "8a820adb-93d7-4c6f-9404-bdbfc14419f4",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "email",
                            ClaimValue = "kha@gmail.com",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "id",
                            ClaimValue = "2a738bf3-a14b-488e-b04e-17f918e8d6a4",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "email",
                            ClaimValue = "lam@gmail.com",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f"),
                            RoleId = new Guid("9e87b492-5343-4272-9a34-fa5de7cffb22")
                        },
                        new
                        {
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        },
                        new
                        {
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Book", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BorrowBill", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BorrowBillDetail", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Book", "Book")
                        .WithMany("BorrowBillDetail")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.BorrowBill", "BorrowBill")
                        .WithMany("BorrowBillDetail")
                        .HasForeignKey("BorrowBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BorrowBill");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Comment", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("LibraryManagement.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.FeedBack", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("LibraryManagement.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Notification", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.BorrowBill", "BorrowBill")
                        .WithMany("Notifications")
                        .HasForeignKey("BorrowBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowBill");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Post", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Request", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Book", b =>
                {
                    b.Navigation("BorrowBillDetail");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BorrowBill", b =>
                {
                    b.Navigation("BorrowBillDetail");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
